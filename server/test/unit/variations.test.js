const {
   rotate90counterClockwise,
   transposeX,
   transposeY,
   transposeMDiag,
   transposeSDiag,
} = require('/src/service/variationCreator');
const { gridEquals } = require('../helpers');

describe('test functionality for creating variations', function(){
   
})
test('rotate', () => {
   const grid = [
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
   ];

   const result = [
      [2, 8, 7, 3, 1, 6, 4, 5, 9],
      [1, 4, 6, 2, 9, 5, 8, 3, 7],
      [9, 3, 5, 4, 7, 8, 2, 6, 1],
      [8, 5, 2, 1, 3, 4, 7, 9, 6],
      [7, 9, 4, 6, 5, 2, 3, 1, 8],
      [6, 1, 3, 7, 8, 9, 5, 4, 2],
      [4, 2, 8, 9, 6, 3, 1, 7, 5],
      [3, 7, 9, 5, 2, 1, 6, 8, 4],
      [5, 6, 1, 8, 4, 7, 9, 2, 3],
   ];

   // console.log(createVariant(game));
   rotate90counterClockwise(grid);
   gridEquals(grid, result);
});

test('transposeX', () => {
   const grid = [
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
   ];

   const result = [
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
   ];

   // console.log(createVariant(game));
   transposeX(grid);
   gridEquals(grid, result);
});

test('rotate', () => {
   const grid = [
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
   ];

   const result = [
      [2, 1, 9, 8, 7, 6, 4, 3, 5],
      [8, 4, 3, 5, 9, 1, 2, 7, 6],
      [7, 6, 5, 2, 4, 3, 8, 9, 1],
      [3, 2, 4, 1, 6, 7, 9, 5, 8],
      [1, 9, 7, 3, 5, 8, 6, 2, 4],
      [6, 5, 8, 4, 2, 9, 3, 1, 7],
      [4, 8, 2, 7, 3, 5, 1, 6, 9],
      [5, 3, 6, 9, 1, 4, 7, 8, 2],
      [9, 7, 1, 6, 8, 2, 5, 4, 3],
   ];

   // console.log(createVariant(game));
   transposeY(grid);
   gridEquals(grid, result);
});

test('rotate', () => {
   const grid = [
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
   ];

   const result = [
      [5, 6, 1, 8, 4, 7, 9, 2, 3],
      [3, 7, 9, 5, 2, 1, 6, 8, 4],
      [4, 2, 8, 9, 6, 3, 1, 7, 5],
      [6, 1, 3, 7, 8, 9, 5, 4, 2],
      [7, 9, 4, 6, 5, 2, 3, 1, 8],
      [8, 5, 2, 1, 3, 4, 7, 9, 6],
      [9, 3, 5, 4, 7, 8, 2, 6, 1],
      [1, 4, 6, 2, 9, 5, 8, 3, 7],
      [2, 8, 7, 3, 1, 6, 4, 5, 9],
   ];

   // console.log(createVariant(game));
   transposeMDiag(grid);
   gridEquals(grid, result);
});

test('rotate', () => {
   const grid = [
      [5, 3, 4, 6, 7, 8, 9, 1, 2],
      [6, 7, 2, 1, 9, 5, 3, 4, 8],
      [1, 9, 8, 3, 4, 2, 5, 6, 7],
      [8, 5, 9, 7, 6, 1, 4, 2, 3],
      [4, 2, 6, 8, 5, 3, 7, 9, 1],
      [7, 1, 3, 9, 2, 4, 8, 5, 6],
      [9, 6, 1, 5, 3, 7, 2, 8, 4],
      [2, 8, 7, 4, 1, 9, 6, 3, 5],
      [3, 4, 5, 2, 8, 6, 1, 7, 9],
   ];

   const result = [
      [9, 5, 4, 6, 1, 3, 7, 8, 2],
      [7, 3, 8, 5, 9, 2, 6, 4, 1],
      [1, 6, 2, 8, 7, 4, 5, 3, 9],
      [6, 9, 7, 4, 3, 1, 2, 5, 8],
      [8, 1, 3, 2, 5, 6, 4, 9, 7],
      [2, 4, 5, 9, 8, 7, 3, 1, 6],
      [5, 7, 1, 3, 6, 9, 8, 2, 4],
      [4, 8, 6, 1, 2, 5, 9, 7, 3],
      [3, 2, 9, 7, 4, 8, 1, 6, 5],
   ];

   // console.log(createVariant(game));
   transposeSDiag(grid);
   gridEquals(grid, result);
});
